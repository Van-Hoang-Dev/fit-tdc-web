<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Smalot\PdfParser\Parser;
use Illuminate\Support\Facades\Log;

class PdfGeminiController extends Controller
{
    public function  handle(Request $request)
    {
        Log::info('üëâ Nh·∫≠n y√™u c·∫ßu t·ª´ client', [ $request->input('question')]);

        $question = $request->input('question');
        if (!$question) {
            Log::warning('‚ùå Thi·∫øu c√¢u h·ªèi t·ª´ request');
            return response()->json(['error' => 'Thi·∫øu c√¢u h·ªèi.'], 400);
        }

        $pdfPath = public_path('assets/chatbot-docs/chatbot.pdf');
        Log::info("üìÑ ƒê∆∞·ªùng d·∫´n file PDF: $pdfPath");

        // Check file exists 
        if (!file_exists($pdfPath)) {
            return response()->json(['error' => 'Kh√¥ng t√¨m th·∫•y file PDF.'], 404);
        }

        try {
            $parse = new Parser();
            $pdfText = $parse->parseFile($pdfPath)->getText();
            $pdfText = mb_convert_encoding($pdfText, 'UTF-8', 'UTF-8');
            $pdfText = substr($pdfText, 0, 12000);
            if (!mb_check_encoding($pdfText, 'UTF-8')) {
                Log::warning('‚ö†Ô∏è N·ªôi dung PDF kh√¥ng ph·∫£i UTF-8');
            }
        } catch (\Exception $e) {
             Log::error('‚ùå L·ªói khi ƒë·ªçc PDF: ' . $e->getMessage());
            return response()->json(['error' => 'L·ªói khi ƒë·ªçc PDF.'], 500);
        }
       

        //  Call Gemini
        $apiKey = env('GEMINI_API_KEY');
        if (!$apiKey) {
        Log::error('‚ùå Ch∆∞a c√≥ API KEY cho Gemini trong .env');
        return response()->json(['error' => 'Thi·∫øu API key.'], 500);
    }
    
        $prompt = <<<EOD
                    C√¢u h·ªèi: "{$question}
                     H√£y ƒë√≥ng vai th√†nh ng∆∞·ªùi h·ªó tr·ª£ t∆∞ v·∫•n cho khoa c√¥ng ngh·ªá th√¥ng tin. Ch√†o h·ªèi th√¢n thi·ªán.   
                    Trong tr∆∞·ªùng h·ª£p li√™n quan ƒë·∫øn tr∆∞·ªùng th√¨ h√£y tham kh·∫£m n·ªôi dung c√≥ trong t√†i li·ªáu ƒë·ªÉ tr·∫£ l·ªùi. N·∫øu kh√¥ng c√≥ trong t√†i li·ªáu h√£y h√£y tra c·ª©u tr√™n google ƒë·ªÉ tr·∫£ l·ªùi. Format c√¢u tr·∫£ l·ªùi d·ªÖ nh√¨n v√† l√†m cho sinh ƒë·ªông h∆°n b·∫±ng icon.
                    D∆∞·ªõi ƒë√¢y l√† n·ªôi dung t√†i li·ªáu PDF:

                    \"\"\"
                    {$pdfText}
                    \"\"\"
                    EOD;


        try {
        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
        ])->post("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={$apiKey}", [
            'contents' => [
                ['parts' => [['text' => $prompt]]]
            ]
        ]);

        $json = $response->json();
        Log::info('‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ Gemini', $json);

        $answer = $json['candidates'][0]['content']['parts'][0]['text'] ?? 'Kh√¥ng c√≥ ph·∫£n h·ªìi.';
        return response()->json(['answer' => $answer]);
    } catch (\Exception $e) {
        Log::error('‚ùå L·ªói g·ªçi API Gemini: ' . $e->getMessage());
        return response()->json(['error' => 'L·ªói g·ªçi Gemini API.'], 500);
    }
    }
}
