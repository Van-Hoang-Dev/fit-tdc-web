const openBtn = document.getElementById("open-chat-popup");
const closeBtn = document.getElementById("close-chat-popup");
const popup = document.getElementById("chatbot-container");

const showPopup = () => {
    openBtn.classList.add("translate-y-10", "opacity-0", "pointer-events-none");
    setTimeout(() => {
        popup.classList.remove(
            "translate-y-10",
            "opacity-0",
            "scale-95",
            "pointer-events-none"
        );
        popup.classList.add("translate-y-0", "opacity-100", "scale-100");
    }, 250);
};

const hidePopup = () => {
    popup.classList.remove("translate-y-0", "opacity-100", "scale-100");
    popup.classList.add(
        "translate-y-10",
        "opacity-0",
        "scale-95",
        "pointer-events-none"
    );
    setTimeout(() => {
        openBtn.classList.remove(
            "translate-y-10",
            "opacity-0",
            "pointer-events-none"
        );
    }, 250);
};

openBtn.addEventListener("click", showPopup);
closeBtn.addEventListener("click", hidePopup);

// Click outside close popup
document.addEventListener("click", (e) => {
    const isClickInsidePopup = popup.contains(e.target);
    const isClickOnButton = openBtn.contains(e.target);

    if (!isClickInsidePopup && !isClickOnButton) {
        // if popup showing ‚Üí hide
        const isVisible = popup.classList.contains("opacity-100");
        if (isVisible) {
            hidePopup();
        }
    }
});

const form = document.getElementById("askForm");
const chatBox = document.getElementById("chatBox");
const sendIcon = document.getElementById("sendIcon");
const sendBtn = document.getElementById("sendBtn");
const clearChatBtn = document.getElementById("clearChatBtn");

// Load l·ªãch s·ª≠ chat khi trang load
window.addEventListener("DOMContentLoaded", () => {
    const chatHistory = JSON.parse(localStorage.getItem("chatHistory") || "[]");

    if (chatHistory.length === 0) {
        addGreetingMessage();
    } else {
        for (const item of chatHistory) {
            const msg = document.createElement("div");
            msg.className = `
                rounded-md shadow-md py-2 px-4 w-fit
                ${
                    item.role === "user"
                        ? "bg-blue-500 text-white ml-auto my-4"
                        : "border border-gray-50 bg-white text-black mr-auto my-2"
                }
            `;
            msg.innerHTML = marked.parse(item.message);
            chatBox.appendChild(msg);
        }
    }

    chatBox.scrollTop = chatBox.scrollHeight;
});

// N√∫t x√≥a l·ªãch s·ª≠
clearChatBtn.addEventListener("click", () => {
    localStorage.removeItem("chatHistory");
    chatBox.innerHTML = "";
    addGreetingMessage();
});

function addGreetingMessage() {
    const greetings = [
        "üëã Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay? üòä",
        "üéì Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr·ª£ l√Ω khoa CNTT. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ n√†o?",
        "ü§ñ Xin ch√†o! H·ªèi g√¨ m√¨nh tr·∫£ l·ªùi h·∫øt nha!",
        "üìò Ch√†o b·∫°n! M√¨nh ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n v·ªõi c√°c th√¥ng tin v·ªÅ khoa CNTT.",
        "‚ú® R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! B·∫°n c·∫ßn t√¨m th√¥ng tin g√¨?",
        "üì¢ M√¨nh lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi m·ªçi th·∫Øc m·∫Øc v·ªÅ ng√†nh CNTT nh√©!",
        "üßë‚Äçüíª B·∫°n ƒëang quan t√¢m ƒë·∫øn gi·∫£ng vi√™n, ch∆∞∆°ng tr√¨nh h·ªçc hay ƒëi·ªÅu g√¨ kh√°c? M√¨nh s·∫µn s√†ng h·ªó tr·ª£!",
        "üöÄ Ch√†o b·∫°n! H√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ m√¨nh c√≥ th·ªÉ gi√∫p b·∫°n nhanh ch√≥ng nh·∫•t!",
        "üîç C·∫ßn t√¨m th√¥ng tin g√¨ v·ªÅ khoa CNTT? C·ª© h·ªèi m√¨nh nh√©!",
        "üí¨ M√¨nh l√† tr·ª£ l√Ω ·∫£o c·ªßa khoa CNTT. B·∫°n mu·ªën bi·∫øt g√¨ n√†o?",
    ];

    // T·∫°o DOM hi·ªÉn th·ªã
    const greeting = greetings[Math.floor(Math.random() * greetings.length)];
    const msg = document.createElement("div");
    msg.className =
        "rounded-md shadow-md border border-gray-50 py-2 px-4 w-fit bg-white text-black mr-auto my-2";
    msg.innerHTML = `<p>${greeting}</p>`;
    chatBox.appendChild(msg);

    // L∆∞u v√†o localStorage
    const chatHistory = JSON.parse(localStorage.getItem("chatHistory") || "[]");
    chatHistory.push({ role: "bot", message: greeting });
    localStorage.setItem("chatHistory", JSON.stringify(chatHistory));

    chatBox.scrollTop = chatBox.scrollHeight;
}

// X·ª≠ l√Ω g·ª≠i c√¢u h·ªèi v√† nh·∫≠n ph·∫£n h·ªìi
form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const question = form.question.value.trim();
    if (!question) return;

    // Create user message in right side
    const userMessage = document.createElement("div");
    userMessage.className = "rounded-md shadow-md py-2 px-4 w-fit bg-blue-500 text-white ml-auto my-4 w-[90%]";
    userMessage.style.maxWidth = '90%'
    userMessage.innerHTML = `<p>${question}</p>`;
    chatBox.appendChild(userMessage);

    // Reset input
    form.question.value = "";

    // Call API
    try {
        // Disable n√∫t g·ª≠i
        sendBtn.disabled = true;
        sendBtn.classList.remove("cursor-pointer");
        sendBtn.classList.add("cursor-wait");
        sendIcon.innerHTML = `<i class="fa-solid fa-square  w-[20px] h-[20px] text-gray-600 animate-pulse"></i>`;

        // Loading animation
        const loadingMessage = document.createElement("div");
        loadingMessage.className =
            "rounded-md shadow-md border border-gray-50 py-2 px-4 w-fit";
        loadingMessage.innerHTML = `
        <div class="container-loading">
            <div class="loading-block"></div>
            <div class="loading-block"></div>
            <div class="loading-block"></div>
        </div>
    `;
        chatBox.appendChild(loadingMessage);
        chatBox.scrollTop = chatBox.scrollHeight;

        // G·ª≠i c√¢u h·ªèi ƒë·∫øn API
        const res = await fetch("/api/ask-chatbot", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ question: question }),
        });

        const data = await res.json();
        loadingMessage.remove();

        // ‚ö†Ô∏è If backend error (status 4xx or 5xx)
        if (!res.ok) {
            responseError();
            return;
        }

        // Create bot message (left side)
        const botMessage = document.createElement("div");
        botMessage.className =
            "rounded-md shadow-md border border-gray-50 py-2 px-4 w-fit bg-white text-black mr-auto my-2";
        botMessage.innerHTML = marked.parse(data.answer);
        chatBox.appendChild(botMessage);

        // L∆∞u v√†o localStorage
        let history = JSON.parse(localStorage.getItem("chatHistory") || "[]");
        history.push({ role: "user", message: question });
        history.push({ role: "bot", message: data.answer });
        localStorage.setItem("chatHistory", JSON.stringify(history));

        // Auto scroll to bottom
        chatBox.scrollTop = chatBox.scrollHeight;

        // Enable btn send
        enableSendBtn();
    } catch (err) {
        console.error("L·ªói khi g·ª≠i y√™u c·∫ßu!");
        enableSendBtn();
        responseError();
        return;
    }
});

// H√†m b·∫≠t l·∫°i n√∫t g·ª≠i
function enableSendBtn() {
    sendBtn.disabled = false;
    sendBtn.classList.add("cursor-pointer");
    sendBtn.classList.remove("cursor-wait");
    sendIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
            fill="none" stroke="#6a7282" stroke-width="2" stroke-linecap="round"
            stroke-linejoin="round" class="lucide lucide-send-horizontal-icon">
        <path d="m3 3 3 9-3 9 19-9Z"></path>
        <path d="M6 12h16"></path>
        </svg>`;
}

// Tr·∫£ l·ªùi n·∫øu c√≥ l·ªói
function responseError() {
    console.error(`Chatbot error: ${data.error}`);

    // Danh s√°ch c√°c c√¢u tr·∫£ l·ªùi l·ªói th√¢n thi·ªán
    const errorMessages = [
        "üòï Xin l·ªói, m√¨nh ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho b·∫°n l√∫c n√†y. B·∫°n th·ª≠ h·ªèi l·∫°i theo c√°ch kh√°c nh√©!",
        "ü§î M√¨nh ƒëang h∆°i b·ªëi r·ªëi v·ªõi c√¢u h·ªèi n√†y... B·∫°n c√≥ th·ªÉ di·ªÖn ƒë·∫°t l·∫°i kh√¥ng?",
        "üìÑ M√¨nh kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p trong t√†i li·ªáu. B·∫°n vui l√≤ng h·ªèi chi ti·∫øt h∆°n nh√©!",
        "üòÖ C√≥ v·∫ª nh∆∞ c√¢u h·ªèi v∆∞·ª£t qu√° kh·∫£ nƒÉng hi·ªán t·∫°i c·ªßa m√¨nh r·ªìi.",
        "üßê H√£y th·ª≠ h·ªèi c·ª• th·ªÉ h∆°n m·ªôt ch√∫t, m√¨nh s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi th·∫≠t t·ªët!",
        "ü§ñ Oops! M√¨nh ch∆∞a c√≥ d·ªØ li·ªáu li√™n quan ƒë·∫øn c√¢u h·ªèi n√†y. B·∫°n th·ª≠ l·∫°i nh√©!",
        "‚ùå Xin l·ªói, m√¨nh ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho b·∫°n l√∫c n√†y. B·∫°n th·ª≠ h·ªèi l·∫°i sau nh√©!",
    ];

    const randomMessage =
        errorMessages[Math.floor(Math.random() * errorMessages.length)];

    const errorMessage = document.createElement("div");
    errorMessage.className =
        "rounded-md border border-red-300 bg-red-50 text-red-700 px-4 py-2 w-fit mr-auto my-2 shadow";
    errorMessage.textContent = randomMessage;
    chatBox.appendChild(errorMessage);
    chatBox.scrollTop = chatBox.scrollHeight;

    enableSendBtn();
    return;
}
